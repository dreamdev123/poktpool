/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * PoktPool App
 * PoktPool API Documentation
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://localhost:8080".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AuthCredentialsDto
 */
export interface AuthCredentialsDto {
    /**
     * 
     * @type {string}
     * @memberof AuthCredentialsDto
     */
    username: string;
    /**
     * Password must contain 1 upper case character, 1 lower case character, 1 special character, and 1 number
     * @type {string}
     * @memberof AuthCredentialsDto
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ConfirmEmailDto
 */
export interface ConfirmEmailDto {
    /**
     * 
     * @type {string}
     * @memberof ConfirmEmailDto
     */
    token: string;
}
/**
 * 
 * @export
 * @interface CreateStakeDto
 */
export interface CreateStakeDto {
    /**
     * 
     * @type {string}
     * @memberof CreateStakeDto
     */
    txId: string;
}
/**
 * 
 * @export
 * @interface RefreshTokenDto
 */
export interface RefreshTokenDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshTokenDto
     */
    refreshToken: string;
}
/**
 * 
 * @export
 * @interface TwoFactorAuthDto
 */
export interface TwoFactorAuthDto {
    /**
     * 
     * @type {string}
     * @memberof TwoFactorAuthDto
     */
    twoFactorCode: string;
}
/**
 * 
 * @export
 * @interface UpdateStakeStatusDto
 */
export interface UpdateStakeStatusDto {
}
/**
 * 
 * @export
 * @interface UserInfoDto
 */
export interface UserInfoDto {
    /**
     * 
     * @type {any}
     * @memberof UserInfoDto
     */
    photo?: any;
    /**
     * 
     * @type {string}
     * @memberof UserInfoDto
     */
    modifiedPhoto?: string;
}
/**
 * 
 * @export
 * @interface UserSignupDto
 */
export interface UserSignupDto {
    /**
     * 
     * @type {string}
     * @memberof UserSignupDto
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignupDto
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserSignupDto
     */
    lastName: string;
    /**
     * Must be a valid email address
     * @type {string}
     * @memberof UserSignupDto
     */
    email: string;
    /**
     * This is the Primary Wallet you will perform all transactions from, it must be a valid 40 character hexidecimal address
     * @type {string}
     * @memberof UserSignupDto
     */
    primaryWalletId: string;
    /**
     * Password must contain 1 upper case character, 1 lower case character, 1 special character, and 1 number
     * @type {string}
     * @memberof UserSignupDto
     */
    password: string;
}
/**
 * PoktPoolAuthApi - fetch parameter creator
 * @export
 */
export const PoktPoolAuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options: any = {}): FetchArgs {
            const localVarPath = `/poktpool/auth/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RefreshTokenDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshToken(body: RefreshTokenDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerRefreshToken.');
            }
            const localVarPath = `/poktpool/auth/refresh-token`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"RefreshTokenDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthCredentialsDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(body: AuthCredentialsDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerSignIn.');
            }
            const localVarPath = `/poktpool/auth/signin`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AuthCredentialsDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserSignupDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUp(body: UserSignupDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling authControllerSignUp.');
            }
            const localVarPath = `/poktpool/auth/signup`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserSignupDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ConfirmEmailDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailConfirmControllerConfirm(body: ConfirmEmailDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling emailConfirmControllerConfirm.');
            }
            const localVarPath = `/poktpool/confirm-email/confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConfirmEmailDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailConfirmControllerResendEmailConfirmation(options: any = {}): FetchArgs {
            const localVarPath = `/poktpool/confirm-email/resend-confirm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoktPoolAuthApi - functional programming interface
 * @export
 */
export const PoktPoolAuthApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolAuthApiFetchParamCreator(configuration).authControllerLogout(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {RefreshTokenDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshToken(body: RefreshTokenDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolAuthApiFetchParamCreator(configuration).authControllerRefreshToken(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {AuthCredentialsDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(body: AuthCredentialsDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolAuthApiFetchParamCreator(configuration).authControllerSignIn(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UserSignupDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUp(body: UserSignupDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolAuthApiFetchParamCreator(configuration).authControllerSignUp(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ConfirmEmailDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailConfirmControllerConfirm(body: ConfirmEmailDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolAuthApiFetchParamCreator(configuration).emailConfirmControllerConfirm(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailConfirmControllerResendEmailConfirmation(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolAuthApiFetchParamCreator(configuration).emailConfirmControllerResendEmailConfirmation(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PoktPoolAuthApi - factory interface
 * @export
 */
export const PoktPoolAuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogout(options?: any) {
            return PoktPoolAuthApiFp(configuration).authControllerLogout(options)(fetch, basePath);
        },
        /**
         * 
         * @param {RefreshTokenDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRefreshToken(body: RefreshTokenDto, options?: any) {
            return PoktPoolAuthApiFp(configuration).authControllerRefreshToken(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {AuthCredentialsDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(body: AuthCredentialsDto, options?: any) {
            return PoktPoolAuthApiFp(configuration).authControllerSignIn(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {UserSignupDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUp(body: UserSignupDto, options?: any) {
            return PoktPoolAuthApiFp(configuration).authControllerSignUp(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ConfirmEmailDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailConfirmControllerConfirm(body: ConfirmEmailDto, options?: any) {
            return PoktPoolAuthApiFp(configuration).emailConfirmControllerConfirm(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailConfirmControllerResendEmailConfirmation(options?: any) {
            return PoktPoolAuthApiFp(configuration).emailConfirmControllerResendEmailConfirmation(options)(fetch, basePath);
        },
    };
};

/**
 * PoktPoolAuthApi - object-oriented interface
 * @export
 * @class PoktPoolAuthApi
 * @extends {BaseAPI}
 */
export class PoktPoolAuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolAuthApi
     */
    public authControllerLogout(options?: any) {
        return PoktPoolAuthApiFp(this.configuration).authControllerLogout(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {RefreshTokenDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolAuthApi
     */
    public authControllerRefreshToken(body: RefreshTokenDto, options?: any) {
        return PoktPoolAuthApiFp(this.configuration).authControllerRefreshToken(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {AuthCredentialsDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolAuthApi
     */
    public authControllerSignIn(body: AuthCredentialsDto, options?: any) {
        return PoktPoolAuthApiFp(this.configuration).authControllerSignIn(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UserSignupDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolAuthApi
     */
    public authControllerSignUp(body: UserSignupDto, options?: any) {
        return PoktPoolAuthApiFp(this.configuration).authControllerSignUp(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ConfirmEmailDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolAuthApi
     */
    public emailConfirmControllerConfirm(body: ConfirmEmailDto, options?: any) {
        return PoktPoolAuthApiFp(this.configuration).emailConfirmControllerConfirm(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolAuthApi
     */
    public emailConfirmControllerResendEmailConfirmation(options?: any) {
        return PoktPoolAuthApiFp(this.configuration).emailConfirmControllerResendEmailConfirmation(options)(this.fetch, this.basePath);
    }

}
/**
 * PoktPoolPublicDataApi - fetch parameter creator
 * @export
 */
export const PoktPoolPublicDataApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataControllerGetCurrentBlockHeight(options: any = {}): FetchArgs {
            const localVarPath = `/poktpool/data/currentblock`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataControllerGetData(options: any = {}): FetchArgs {
            const localVarPath = `/poktpool/data`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoktPoolPublicDataApi - functional programming interface
 * @export
 */
export const PoktPoolPublicDataApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataControllerGetCurrentBlockHeight(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolPublicDataApiFetchParamCreator(configuration).dataControllerGetCurrentBlockHeight(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataControllerGetData(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolPublicDataApiFetchParamCreator(configuration).dataControllerGetData(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PoktPoolPublicDataApi - factory interface
 * @export
 */
export const PoktPoolPublicDataApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataControllerGetCurrentBlockHeight(options?: any) {
            return PoktPoolPublicDataApiFp(configuration).dataControllerGetCurrentBlockHeight(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dataControllerGetData(options?: any) {
            return PoktPoolPublicDataApiFp(configuration).dataControllerGetData(options)(fetch, basePath);
        },
    };
};

/**
 * PoktPoolPublicDataApi - object-oriented interface
 * @export
 * @class PoktPoolPublicDataApi
 * @extends {BaseAPI}
 */
export class PoktPoolPublicDataApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolPublicDataApi
     */
    public dataControllerGetCurrentBlockHeight(options?: any) {
        return PoktPoolPublicDataApiFp(this.configuration).dataControllerGetCurrentBlockHeight(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolPublicDataApi
     */
    public dataControllerGetData(options?: any) {
        return PoktPoolPublicDataApiFp(this.configuration).dataControllerGetData(options)(this.fetch, this.basePath);
    }

}
/**
 * PoktPoolStakeApi - fetch parameter creator
 * @export
 */
export const PoktPoolStakeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStakeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerCreateNewStake(body: CreateStakeDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling stakeControllerCreateNewStake.');
            }
            const localVarPath = `/poktpool/stake`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateStakeDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerDeleteStake(txId: string, options: any = {}): FetchArgs {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling stakeControllerDeleteStake.');
            }
            const localVarPath = `/poktpool/stake/{txId}`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerGetStakeById(txId: string, options: any = {}): FetchArgs {
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling stakeControllerGetStakeById.');
            }
            const localVarPath = `/poktpool/stake/{txId}`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerGetStakes(options: any = {}): FetchArgs {
            const localVarPath = `/poktpool/stake`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateStakeStatusDto} body 
         * @param {string} txId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerUpdateStakeStatus(body: UpdateStakeStatusDto, txId: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling stakeControllerUpdateStakeStatus.');
            }
            // verify required parameter 'txId' is not null or undefined
            if (txId === null || txId === undefined) {
                throw new RequiredError('txId','Required parameter txId was null or undefined when calling stakeControllerUpdateStakeStatus.');
            }
            const localVarPath = `/poktpool/stake/{txId}/status`
                .replace(`{${"txId"}}`, encodeURIComponent(String(txId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UpdateStakeStatusDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoktPoolStakeApi - functional programming interface
 * @export
 */
export const PoktPoolStakeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateStakeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerCreateNewStake(body: CreateStakeDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolStakeApiFetchParamCreator(configuration).stakeControllerCreateNewStake(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerDeleteStake(txId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolStakeApiFetchParamCreator(configuration).stakeControllerDeleteStake(txId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} txId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerGetStakeById(txId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolStakeApiFetchParamCreator(configuration).stakeControllerGetStakeById(txId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerGetStakes(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolStakeApiFetchParamCreator(configuration).stakeControllerGetStakes(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UpdateStakeStatusDto} body 
         * @param {string} txId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerUpdateStakeStatus(body: UpdateStakeStatusDto, txId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolStakeApiFetchParamCreator(configuration).stakeControllerUpdateStakeStatus(body, txId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PoktPoolStakeApi - factory interface
 * @export
 */
export const PoktPoolStakeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CreateStakeDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerCreateNewStake(body: CreateStakeDto, options?: any) {
            return PoktPoolStakeApiFp(configuration).stakeControllerCreateNewStake(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} txId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerDeleteStake(txId: string, options?: any) {
            return PoktPoolStakeApiFp(configuration).stakeControllerDeleteStake(txId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} txId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerGetStakeById(txId: string, options?: any) {
            return PoktPoolStakeApiFp(configuration).stakeControllerGetStakeById(txId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerGetStakes(options?: any) {
            return PoktPoolStakeApiFp(configuration).stakeControllerGetStakes(options)(fetch, basePath);
        },
        /**
         * 
         * @param {UpdateStakeStatusDto} body 
         * @param {string} txId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        stakeControllerUpdateStakeStatus(body: UpdateStakeStatusDto, txId: string, options?: any) {
            return PoktPoolStakeApiFp(configuration).stakeControllerUpdateStakeStatus(body, txId, options)(fetch, basePath);
        },
    };
};

/**
 * PoktPoolStakeApi - object-oriented interface
 * @export
 * @class PoktPoolStakeApi
 * @extends {BaseAPI}
 */
export class PoktPoolStakeApi extends BaseAPI {
    /**
     * 
     * @param {CreateStakeDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolStakeApi
     */
    public stakeControllerCreateNewStake(body: CreateStakeDto, options?: any) {
        return PoktPoolStakeApiFp(this.configuration).stakeControllerCreateNewStake(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} txId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolStakeApi
     */
    public stakeControllerDeleteStake(txId: string, options?: any) {
        return PoktPoolStakeApiFp(this.configuration).stakeControllerDeleteStake(txId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} txId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolStakeApi
     */
    public stakeControllerGetStakeById(txId: string, options?: any) {
        return PoktPoolStakeApiFp(this.configuration).stakeControllerGetStakeById(txId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolStakeApi
     */
    public stakeControllerGetStakes(options?: any) {
        return PoktPoolStakeApiFp(this.configuration).stakeControllerGetStakes(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UpdateStakeStatusDto} body 
     * @param {string} txId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolStakeApi
     */
    public stakeControllerUpdateStakeStatus(body: UpdateStakeStatusDto, txId: string, options?: any) {
        return PoktPoolStakeApiFp(this.configuration).stakeControllerUpdateStakeStatus(body, txId, options)(this.fetch, this.basePath);
    }

}
/**
 * PoktPoolTwoFactorAuthenticationApi - fetch parameter creator
 * @export
 */
export const PoktPoolTwoFactorAuthenticationApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TwoFactorAuthDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twoFactorAuthAuthenticate(body: TwoFactorAuthDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling twoFactorAuthAuthenticate.');
            }
            const localVarPath = `/poktpool/2fa/authenticate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TwoFactorAuthDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TwoFactorAuthDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twoFactorAuthEnableTwoFactorAuth(body: TwoFactorAuthDto, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling twoFactorAuthEnableTwoFactorAuth.');
            }
            const localVarPath = `/poktpool/2fa/enable-qr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"TwoFactorAuthDto" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twoFactorAuthGenerateQrCode(options: any = {}): FetchArgs {
            const localVarPath = `/poktpool/2fa/create-qr`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoktPoolTwoFactorAuthenticationApi - functional programming interface
 * @export
 */
export const PoktPoolTwoFactorAuthenticationApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TwoFactorAuthDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twoFactorAuthAuthenticate(body: TwoFactorAuthDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolTwoFactorAuthenticationApiFetchParamCreator(configuration).twoFactorAuthAuthenticate(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {TwoFactorAuthDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twoFactorAuthEnableTwoFactorAuth(body: TwoFactorAuthDto, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolTwoFactorAuthenticationApiFetchParamCreator(configuration).twoFactorAuthEnableTwoFactorAuth(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twoFactorAuthGenerateQrCode(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolTwoFactorAuthenticationApiFetchParamCreator(configuration).twoFactorAuthGenerateQrCode(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PoktPoolTwoFactorAuthenticationApi - factory interface
 * @export
 */
export const PoktPoolTwoFactorAuthenticationApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {TwoFactorAuthDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twoFactorAuthAuthenticate(body: TwoFactorAuthDto, options?: any) {
            return PoktPoolTwoFactorAuthenticationApiFp(configuration).twoFactorAuthAuthenticate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {TwoFactorAuthDto} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twoFactorAuthEnableTwoFactorAuth(body: TwoFactorAuthDto, options?: any) {
            return PoktPoolTwoFactorAuthenticationApiFp(configuration).twoFactorAuthEnableTwoFactorAuth(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twoFactorAuthGenerateQrCode(options?: any) {
            return PoktPoolTwoFactorAuthenticationApiFp(configuration).twoFactorAuthGenerateQrCode(options)(fetch, basePath);
        },
    };
};

/**
 * PoktPoolTwoFactorAuthenticationApi - object-oriented interface
 * @export
 * @class PoktPoolTwoFactorAuthenticationApi
 * @extends {BaseAPI}
 */
export class PoktPoolTwoFactorAuthenticationApi extends BaseAPI {
    /**
     * 
     * @param {TwoFactorAuthDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolTwoFactorAuthenticationApi
     */
    public twoFactorAuthAuthenticate(body: TwoFactorAuthDto, options?: any) {
        return PoktPoolTwoFactorAuthenticationApiFp(this.configuration).twoFactorAuthAuthenticate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {TwoFactorAuthDto} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolTwoFactorAuthenticationApi
     */
    public twoFactorAuthEnableTwoFactorAuth(body: TwoFactorAuthDto, options?: any) {
        return PoktPoolTwoFactorAuthenticationApiFp(this.configuration).twoFactorAuthEnableTwoFactorAuth(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolTwoFactorAuthenticationApi
     */
    public twoFactorAuthGenerateQrCode(options?: any) {
        return PoktPoolTwoFactorAuthenticationApiFp(this.configuration).twoFactorAuthGenerateQrCode(options)(this.fetch, this.basePath);
    }

}
/**
 * PoktPoolUserApi - fetch parameter creator
 * @export
 */
export const PoktPoolUserApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserInfo(options: any = {}): FetchArgs {
            const localVarPath = `/poktpool/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} photo 
         * @param {string} modifiedPhoto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUserInfo(photo: any, modifiedPhoto: string, options: any = {}): FetchArgs {
            // verify required parameter 'photo' is not null or undefined
            if (photo === null || photo === undefined) {
                throw new RequiredError('photo','Required parameter photo was null or undefined when calling usersControllerUpdateUserInfo.');
            }
            // verify required parameter 'modifiedPhoto' is not null or undefined
            if (modifiedPhoto === null || modifiedPhoto === undefined) {
                throw new RequiredError('modifiedPhoto','Required parameter modifiedPhoto was null or undefined when calling usersControllerUpdateUserInfo.');
            }
            const localVarPath = `/poktpool/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new url.URLSearchParams();

            // authentication bearer required

            if (photo !== undefined) {
                localVarFormParams.set('photo', photo as any);
            }

            if (modifiedPhoto !== undefined) {
                localVarFormParams.set('modifiedPhoto', modifiedPhoto as any);
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams.toString();

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PoktPoolUserApi - functional programming interface
 * @export
 */
export const PoktPoolUserApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolUserApiFetchParamCreator(configuration).usersControllerGetUserInfo(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {any} photo 
         * @param {string} modifiedPhoto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUserInfo(photo: any, modifiedPhoto: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PoktPoolUserApiFetchParamCreator(configuration).usersControllerUpdateUserInfo(photo, modifiedPhoto, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PoktPoolUserApi - factory interface
 * @export
 */
export const PoktPoolUserApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerGetUserInfo(options?: any) {
            return PoktPoolUserApiFp(configuration).usersControllerGetUserInfo(options)(fetch, basePath);
        },
        /**
         * 
         * @param {any} photo 
         * @param {string} modifiedPhoto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdateUserInfo(photo: any, modifiedPhoto: string, options?: any) {
            return PoktPoolUserApiFp(configuration).usersControllerUpdateUserInfo(photo, modifiedPhoto, options)(fetch, basePath);
        },
    };
};

/**
 * PoktPoolUserApi - object-oriented interface
 * @export
 * @class PoktPoolUserApi
 * @extends {BaseAPI}
 */
export class PoktPoolUserApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolUserApi
     */
    public usersControllerGetUserInfo(options?: any) {
        return PoktPoolUserApiFp(this.configuration).usersControllerGetUserInfo(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {any} photo 
     * @param {string} modifiedPhoto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PoktPoolUserApi
     */
    public usersControllerUpdateUserInfo(photo: any, modifiedPhoto: string, options?: any) {
        return PoktPoolUserApiFp(this.configuration).usersControllerUpdateUserInfo(photo, modifiedPhoto, options)(this.fetch, this.basePath);
    }

}
