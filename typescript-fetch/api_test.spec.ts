/**
 * PoktPool App
 * PoktPool API Documentation
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("PoktPoolAuthApi", () => {
  let instance: api.PoktPoolAuthApi
  beforeEach(function() {
    instance = new api.PoktPoolAuthApi(config)
  });

  test("authControllerLogout", () => {
    return expect(instance.authControllerLogout({})).resolves.toBe(null)
  })
  test("authControllerRefreshToken", () => {
    const body: api.RefreshTokenDto = undefined
    return expect(instance.authControllerRefreshToken(body, {})).resolves.toBe(null)
  })
  test("authControllerSignIn", () => {
    const body: api.AuthCredentialsDto = undefined
    return expect(instance.authControllerSignIn(body, {})).resolves.toBe(null)
  })
  test("authControllerSignUp", () => {
    const body: api.UserSignupDto = undefined
    return expect(instance.authControllerSignUp(body, {})).resolves.toBe(null)
  })
  test("emailConfirmControllerConfirm", () => {
    const body: api.ConfirmEmailDto = undefined
    return expect(instance.emailConfirmControllerConfirm(body, {})).resolves.toBe(null)
  })
  test("emailConfirmControllerResendEmailConfirmation", () => {
    return expect(instance.emailConfirmControllerResendEmailConfirmation({})).resolves.toBe(null)
  })
})

describe("PoktPoolPublicDataApi", () => {
  let instance: api.PoktPoolPublicDataApi
  beforeEach(function() {
    instance = new api.PoktPoolPublicDataApi(config)
  });

  test("dataControllerGetCurrentBlockHeight", () => {
    return expect(instance.dataControllerGetCurrentBlockHeight({})).resolves.toBe(null)
  })
  test("dataControllerGetData", () => {
    return expect(instance.dataControllerGetData({})).resolves.toBe(null)
  })
})

describe("PoktPoolStakeApi", () => {
  let instance: api.PoktPoolStakeApi
  beforeEach(function() {
    instance = new api.PoktPoolStakeApi(config)
  });

  test("stakeControllerCreateNewStake", () => {
    const body: api.CreateStakeDto = undefined
    return expect(instance.stakeControllerCreateNewStake(body, {})).resolves.toBe(null)
  })
  test("stakeControllerDeleteStake", () => {
    const txId: string = "txId_example"
    return expect(instance.stakeControllerDeleteStake(txId, {})).resolves.toBe(null)
  })
  test("stakeControllerGetStakeById", () => {
    const txId: string = "txId_example"
    return expect(instance.stakeControllerGetStakeById(txId, {})).resolves.toBe(null)
  })
  test("stakeControllerGetStakes", () => {
    return expect(instance.stakeControllerGetStakes({})).resolves.toBe(null)
  })
  test("stakeControllerUpdateStakeStatus", () => {
    const body: api.UpdateStakeStatusDto = undefined
    const txId: string = "txId_example"
    return expect(instance.stakeControllerUpdateStakeStatus(body, txId, {})).resolves.toBe(null)
  })
})

describe("PoktPoolTwoFactorAuthenticationApi", () => {
  let instance: api.PoktPoolTwoFactorAuthenticationApi
  beforeEach(function() {
    instance = new api.PoktPoolTwoFactorAuthenticationApi(config)
  });

  test("twoFactorAuthAuthenticate", () => {
    const body: api.TwoFactorAuthDto = undefined
    return expect(instance.twoFactorAuthAuthenticate(body, {})).resolves.toBe(null)
  })
  test("twoFactorAuthEnableTwoFactorAuth", () => {
    const body: api.TwoFactorAuthDto = undefined
    return expect(instance.twoFactorAuthEnableTwoFactorAuth(body, {})).resolves.toBe(null)
  })
  test("twoFactorAuthGenerateQrCode", () => {
    return expect(instance.twoFactorAuthGenerateQrCode({})).resolves.toBe(null)
  })
})

describe("PoktPoolUserApi", () => {
  let instance: api.PoktPoolUserApi
  beforeEach(function() {
    instance = new api.PoktPoolUserApi(config)
  });

  test("usersControllerGetUserInfo", () => {
    return expect(instance.usersControllerGetUserInfo({})).resolves.toBe(null)
  })
  test("usersControllerUpdateUserInfo", () => {
    const photo: any = undefined
    const modifiedPhoto: string = "modifiedPhoto_example"
    return expect(instance.usersControllerUpdateUserInfo(photo, modifiedPhoto, {})).resolves.toBe(null)
  })
})

